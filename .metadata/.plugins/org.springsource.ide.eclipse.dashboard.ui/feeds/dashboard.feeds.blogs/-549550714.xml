<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Spring]]></title><description><![CDATA[Level up your Java code and explore what Spring can do for you.]]></description><link>https://spring.io</link><generator>GatsbyJS</generator><lastBuildDate>Tue, 28 Mar 2023 12:16:18 GMT</lastBuildDate><item><title><![CDATA[Context Propagation with Project Reactor 1 - The Basics]]></title><link>https://spring.io/blog/2023/03/28/context-propagation-with-project-reactor-1-the-basics</link><guid isPermaLink="true">https://spring.io/blog/2023/03/28/context-propagation-with-project-reactor-1-the-basics</guid><dc:creator><![CDATA[Dariusz Jędrzejczyk]]></dc:creator><pubDate>Tue, 28 Mar 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Spring Boot 3 and Spring Framework 6 &lt;a href=&quot;https://spring.io/blog/2022/10/12/observability-with-spring-boot-3&quot;&gt;brought us&lt;/a&gt; a unified and consistent way to enable Observability in applications that use Micrometer. The evolution from Spring Cloud Sleuth to Micrometer, along with the Observation API and Micrometer Tracing, made us consolidate various approaches to context propagation. In this blog post series, we aim to explain how we came to support context propagation in Project Reactor to meet the needs of imperative libraries. By building your understanding from the ground up, you will be able to use these constructs and understand what’s happening underneath. We assume basic understanding of reactive programming concepts. If you’re new to it or want to refresh your knowledge, have a look at &lt;a href=&quot;https://projectreactor.io/docs/core/release/reference/#intro-reactive&quot;&gt;Introduction to Reactive Programming&lt;/a&gt; in the Project Reactor documentation.&lt;/p&gt;
&lt;p&gt;In this article, we develop a simple e-commerce application. Our limited angle considers a request that adds a product and notifies the shop that a new product was added to the inventory. As responsible developers, we want to log all the steps taken for a particular request so that, if we were to investigate a problem, we can look at the logs and understand what happened. We’ll explore how we can achieve the goal of providing the logging utility with contextual metadata about the request in an imperative style and also compare that to a more functional, declarative style of Project Reactor. The next articles will explore in more detail why and how we need a bridge between both programming styles.&lt;/p&gt;
&lt;h2&gt;ThreadLocal&lt;/h2&gt;
&lt;p&gt;To identify the logs belonging to a particular request, we need a way to correlate them. We may generate a simplistic random identifier like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;static long correlationId() {
  return Math.abs(ThreadLocalRandom.current().nextLong());
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We need a way to make the correlation identifier be available in a logging utility. We could make the correlation part of every method call in our business logic, but that would be very invasive and verbose.&lt;/p&gt;
&lt;p&gt;Usually, third-party libraries use JDK’s &lt;code&gt;ThreadLocal&lt;/code&gt; to convey implicit information that is not the primary concern of our application’s business logic.&lt;/p&gt;
&lt;p&gt;Let’s declare a static field for our correlation identifier:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;static final ThreadLocal&amp;#x3C;Long&gt; CORRELATION_ID = new ThreadLocal&amp;#x3C;&gt;();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s our log method. It prints the current &lt;code&gt;Thread&lt;/code&gt; name and formats the output:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;static void log(String message) {
  String threadName = Thread.currentThread().getName();
  String threadNameTail = threadName.substring(
    Math.max(0, threadName.length() - 10));
  System.out.printf(&quot;[%10s][%20s] %s%n&quot;,
    threadNameTail, CORRELATION_ID.get(), message);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have everything we need to handle the request and log each step by using the implicit correlation identifier.&lt;/p&gt;
&lt;p&gt;At the beginning of every request, the application makes a call to the following method to initiate the correlation:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;static void initRequest() {
  CORRELATION_ID.set(correlationId()));
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our simplified request handler performs the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;void handleRequest() {
  initRequest();

  addProduct(&quot;test-product&quot;);
  notifyShop(&quot;test-product&quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Logging in the business logic looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;void addProduct(String productName) {
  log(&quot;Adding product: &quot; + productName);
  // ...
}

void notifyShop(String productName) {
  log(&quot;Notifying shop about: &quot; + productName);
  // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can expect our application to log these lines:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[      main][ 8592000019542134146] Adding product: test-product
[      main][ 8592000019542134146] Notifying shop about: test-product
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As long as the execution of a particular request happens on the same &lt;code&gt;Thread&lt;/code&gt; and is not interleaved with other concerns, &lt;code&gt;ThreadLocal&lt;/code&gt; lets us decouple business logic from the metadata used for logging.&lt;/p&gt;
&lt;h2&gt;Asynchronous Processing&lt;/h2&gt;
&lt;p&gt;Let’s imagine this application starts to have a higher load and needs to handle many concurrent requests. Imagine that we can use an asynchronous and non-blocking server implementation that requires us to provide asynchronous declarations instead of imperative and blocking steps.&lt;/p&gt;
&lt;p&gt;Our request handler could return a &lt;code&gt;CompletableFuture&lt;/code&gt; to process the request in an asynchronous and non-blocking manner:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;CompletableFuture&amp;#x3C;Void&gt; handleRequest() {
  return CompletableFuture
    .runAsync(() -&gt; addProduct(&quot;test-product&quot;))
    .thenRunAsync(() -&gt; notifyShop(&quot;test-product&quot;))
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unfortunately, when we execute our asynchronous version, the logs no longer contain the correlation identifier:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[l-worker-1][                null] Adding product: test-product
[l-worker-1][                null] Notifying shop about: test-product
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Task Wrapping&lt;/h2&gt;
&lt;p&gt;A known mitigation for this issue is to wrap the tasks executed by asynchronous APIs. By wrapping, we mean an implementation that performs the restoration of the &lt;code&gt;ThreadLocal&lt;/code&gt; context. When the task is created, the current context is captured. When a worker &lt;code&gt;Thread&lt;/code&gt; actually executes the task, that context is restored. Let’s see how this would work for our example case with &lt;code&gt;Runnable&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;class WrappedRunnable implements Runnable {

  private final Long correlationId;
  private final Runnable wrapped;

  public WrappedRunnable(Runnable wrapped) {
    this.correlationId = CORRELATION_ID.get();
    this.wrapped = wrapped;
  }

  @Override
  public void run() {
    Long old = CORRELATION_ID.get();
    CORRELATION_ID.set(this.correlationId);
    try {
      wrapped.run();
    } finally {
      CORRELATION_ID.set(old);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We could reimplement our handler like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;CompletableFuture&amp;#x3C;Void&gt; handleRequest() {
  return CompletableFuture
    .runAsync(new WrappedRunnable(
      () -&gt; addProduct(&quot;test-product&quot;)))
    .thenRunAsync(new WrappedRunnable(
      () -&gt; notifyShop(&quot;test-product&quot;)));
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unfortunately, that is a lot of overhead. Luckily, the JDK has an API for executing asynchronous tasks: the &lt;code&gt;Executor&lt;/code&gt; interface. In a real-world scenario, we’d want to use a more comprehensive API, the &lt;code&gt;ExecutorService&lt;/code&gt;. However, for our explanatory purposes, &lt;code&gt;Executor&lt;/code&gt; should suffice.&lt;/p&gt;
&lt;p&gt;Let’s have a look:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;static class WrappedExecutor implements Executor {

  private final Executor actual;

  WrappedExecutor(Executor actual) {
    this.actual = actual;
  }

  @Override
  public void execute(Runnable command) {
    actual.execute(new WrappedRunnable(command));
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s reuse the common &lt;code&gt;ForkJoinPool&lt;/code&gt; that the &lt;code&gt;CompletableFuture&lt;/code&gt; framework uses by default, but wrap it with our implementation.
Now our code looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;static Executor executor = new WrappedExecutor(ForkJoinPool.commonPool());

CompletableFuture&amp;#x3C;Void&gt; handleRequest() {
  return CompletableFuture
    .runAsync(() -&gt; addProduct(&quot;test-product&quot;), executor)
    .thenRunAsync(() -&gt; notifyShop(&quot;test-product&quot;), executor);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our logs again work properly:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[l-worker-1][ 7321040639376081961] Adding product: test-product
[l-worker-2][ 7321040639376081961] Notifying shop about: test-product
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In some scenarios, the &lt;code&gt;CompletableFuture&lt;/code&gt; framework can provide the means to process asynchronous tasks in a non-blocking fashion. However, in many cases, the limited API surface and its behavior characteristics can be limiting. For example, we might want to delay the processing and resume later when our system is at its capacity. With &lt;code&gt;CompletableFuture&lt;/code&gt; all created instances start computing as soon as they are created. We might also want to apply more fine grained operations on top of a stream of data, instead of operating upon a single unit of computation. For some of those reasons and also more, we might consider using a reactive programming library. We will consider Project Reactor, which is the default reactive implementation in the Spring portfolio.&lt;/p&gt;
&lt;h2&gt;Project Reactor&lt;/h2&gt;
&lt;p&gt;To provide a resilient framework for asynchronous processing, the Java community proposed the Reactive Streams specification. It helped establish a common vocabulary that the JDK was missing before – clear semantics for signal propagation, error handling, termination, and lifecycle management. It also allowed for built-in backpressure. Spring adopted this approach by introducing WebFlux, making Project Reactor and its reactive types first class citizens of the API.&lt;/p&gt;
&lt;p&gt;Reactive Streams bring elegant and minimalistic solutions for asynchronous stream processing. However, context propagation is not part of the specification. The non-blocking and asynchronous nature of reactive libraries, together with potentially complex implementations, makes it extremely difficult to use &lt;code&gt;ThreadLocal&lt;/code&gt;s. The reason for it is that there are no guarantees regarding which &lt;code&gt;Thread&lt;/code&gt; can run the user’s code. Implementations are allowed to perform all sorts of optimizations as long as they guarantee serial delivery, thus making the user’s code concurrency-agnostic, shifting the burden of dealing with concurrency to the library internals.&lt;/p&gt;
&lt;p&gt;To deliver its guarantees, reactive programming in Java assumes the functional programming paradigm is used to form a declarative and composable flow, which is agnostic of the fact that different &lt;code&gt;Thread&lt;/code&gt;s can execute user-provided code. The reactive libraries can provide an extremely performant runtime, while complying to the specification, as long as there are no side effects in user code that assume execution within a particular &lt;code&gt;Thread&lt;/code&gt;. &lt;code&gt;ThreadLocal&lt;/code&gt; clearly violates this requirement.&lt;/p&gt;
&lt;p&gt;Let’s try to rewrite our handler to use Project Reactor. The individual operations become:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;Mono&amp;#x3C;Void&gt; addProduct(String productName) {
  log(&quot;Adding product: &quot; + productName);
  return Mono.empty(); // Assume we’re actually storing the product
}

Mono&amp;#x3C;Boolean&gt; notifyShop(String productName) {
  log(&quot;Notifying shop about: &quot; + productName);
  return Mono.just(true); // Assume we’re actually notifying the shop
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s try to use the above:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;Mono&amp;#x3C;Void&gt; handleRequest() {
  initRequest();
  log(&quot;Invoke methodAssembling the to get Mono chain&quot;);

  return Mono.just(&quot;test-product&quot;)
    .flatMap(product -&gt;
      Flux.concat(
        addProduct(product),
        notifyShop(product))
      .then())
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our naive implementation yields the desired output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[      main][ 7224499961623309444] Assembling the chain
[      main][ 7224499961623309444] Adding product: test-product
[      main][ 7224499961623309444] Notifying shop about: test-product
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above implementation is invoked in the &lt;code&gt;main&lt;/code&gt; &lt;code&gt;Thread&lt;/code&gt;, and the execution is confined to that &lt;code&gt;Thread&lt;/code&gt;. We should not make such assumptions though.&lt;/p&gt;
&lt;p&gt;In the handler, we introduce a slight delay before we propagate the result of the processing. We do so to demonstrate the implicit &lt;code&gt;Thread&lt;/code&gt; switch that happens behind the scenes.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;Mono&amp;#x3C;Void&gt; handleRequest() {
  initRequest(); &amp;#x3C;1&gt;
  log(&quot;Assembling the chain&quot;); // &amp;#x3C;2&gt;

  return Mono.just(&quot;test-product&quot;)
    .delayElement(Duration.ofMillis(1)) // &amp;#x3C;3&gt;
    .flatMap(product -&gt;
      Flux.concat(
        addProduct(product), // &amp;#x3C;4&gt;
        notifyShop(product))
      .then())
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When run, the following is printed:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[      main][ 6265915299594887150] Assembling the chain
[parallel-1][                null] Adding product: test-product
[parallel-1][                null] Notifying shop about: test-product
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What happened? Why does one log have the correlation identifier but the others don’t?&lt;/p&gt;
&lt;p&gt;When the server calls our handler, the initialization at &lt;code&gt;&amp;#x3C;1&gt;&lt;/code&gt; sets the &lt;code&gt;ThreadLocal&lt;/code&gt; correlation identifier and the log at &lt;code&gt;&amp;#x3C;2&gt;&lt;/code&gt; is able to use it. Those experienced in reactive programming can tell you the issue is that the execution happens in different phases. The &lt;code&gt;ThreadLocal&lt;/code&gt; is set at assembly time. “You should restore it at subscription time, too” would be one piece of advice. We’ll get back to that in a bit. If the terms “assembly”, “subscription”, and “execution time” are confusing to you, have a look at the excellent explanations in &lt;a href=&quot;https://spring.io/blog/2019/03/06/flight-of-the-flux-1-assembly-vs-subscription&quot;&gt;Simon’s blog post&lt;/a&gt; or watch &lt;a href=&quot;https://www.youtube.com/watch?v=sNgTTcG-fEU&quot;&gt;the talk of the same title&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While the method is returned immediately it does not guarantee that execution is started. That is because the returned &lt;code&gt;Mono&lt;/code&gt; has to be subscribed to trigger processing. It may potentially happen in a different &lt;code&gt;Thread&lt;/code&gt;. The &lt;code&gt;delayElement&lt;/code&gt; operator at &lt;code&gt;&amp;#x3C;3&gt;&lt;/code&gt; implicitly uses a shared &lt;code&gt;Scheduler&lt;/code&gt; (an abstraction for a pool of &lt;code&gt;Thread&lt;/code&gt;s) from Reactor to deliver the signal on yet another &lt;code&gt;Thread&lt;/code&gt; after the specified delay. That signal propagates to the downstream operators, which let us sequence adding the product first and notifying the shop afterwards. There are more surprising aspects of the pipeline we assembled, but let’s not get too confused.&lt;/p&gt;
&lt;p&gt;The issue is that, in &lt;code&gt;&amp;#x3C;4&gt;&lt;/code&gt;, if we log, we can’t really tell what &lt;code&gt;Thread&lt;/code&gt; the call is going to happen on. Operators such as &lt;code&gt;flatMap&lt;/code&gt; can introduce their own asynchrony.&lt;/p&gt;
&lt;p&gt;In a regular case, values start being delivered when the chain is subscribed to. We could therefore restore &lt;code&gt;ThreadLocal&lt;/code&gt; values upon every subscription. It’s not always the best idea though. The &lt;code&gt;Subscription&lt;/code&gt; can be delivered asynchronously, on a different &lt;code&gt;Thread&lt;/code&gt;. Also values can be delivered on different &lt;code&gt;Thread&lt;/code&gt;s. In the case of backpressure, a signal can be delivered as a result of a request for more data on the &lt;code&gt;Thread&lt;/code&gt; performing the request instead of the &lt;code&gt;Thread&lt;/code&gt; used by the &lt;code&gt;Publisher&lt;/code&gt; of data. Lots of moving parts and quirks to consider! To learn more about threading and asynchronous execution in Reactor please review &lt;a href=&quot;https://spring.io/blog/2019/12/13/flight-of-the-flux-3-hopping-threads-and-schedulers&quot;&gt;another part of our previous blog post series&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Reactor Context&lt;/h2&gt;
&lt;p&gt;Project Reactor introduced a mechanism that is well aligned with functional programming to provide means to transport contextual metadata. It is simply called &lt;code&gt;Context&lt;/code&gt;. And it stays attached to the reactive chain, despite Thread switches that happen behind the scenes.&lt;/p&gt;
&lt;p&gt;As we’ve seen, Project Reactor allows declaratively specifying the intent, while staying concurrency agnostic. It does provide the means to control concurrency when necessary, by using dedicated operators or configuration parameters (such as &lt;code&gt;publishOn&lt;/code&gt;, &lt;code&gt;subscribeOn&lt;/code&gt;, or the advanced parameters of &lt;code&gt;flatMap&lt;/code&gt;), but that level of control is abstracted away from the core processing logic.&lt;/p&gt;
&lt;p&gt;We mentioned side effects earlier. How can we get rid of those and still be able to transport contextual metadata?&lt;/p&gt;
&lt;p&gt;To play well with functional programming, the &lt;code&gt;Context&lt;/code&gt; is bound to the &lt;code&gt;Subscriber&lt;/code&gt;, the consumer of signals emitted by the &lt;code&gt;Publisher&lt;/code&gt;. Upon subscription, a &lt;code&gt;Subscriber&lt;/code&gt; is made visible to all preceding operators in the assembled pipeline. When we associate an immutable &lt;code&gt;Map&lt;/code&gt;-like data structure to the &lt;code&gt;Subscriber&lt;/code&gt; instance, it allows attaching and retrieving contextual information in parts of a reactive pipeline.&lt;/p&gt;
&lt;p&gt;With control of the impact and the means to provide inheritance between steps in the reactive chain, Reactor &lt;code&gt;Context&lt;/code&gt; is a side-effect-free concept, which can be used to provide meta-information to the processing. “Just what we need to correlate our requests!”.&lt;/p&gt;
&lt;p&gt;Let’s rewrite our application to use Reactor &lt;code&gt;Context&lt;/code&gt; instead of &lt;code&gt;ThreadLocal&lt;/code&gt;s.&lt;/p&gt;
&lt;p&gt;First, we need to make the correlation identifier an explicit parameter of the log method:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;static void log(String message, long correlationId) {
  String threadName = Thread.currentThread().getName();
  String threadNameTail = threadName.substring(
    Math.max(0, threadName.length() - 10));
  System.out.printf(&quot;[%10s][%20s] %s%n&quot;,
    threadNameTail, correlationId, message);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our actions are the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;Mono&amp;#x3C;Void&gt; addProduct(String productName) {
  return Mono.deferContextual(ctx -&gt; {
    log(&quot;Adding product: &quot; + productName, ctx.get(&quot;CORRELATION_ID&quot;));
    return Mono.empty(); // Assume we’re actually storing the product
  });
}

Mono&amp;#x3C;Boolean&gt; notifyShop(String productName) {
  return Mono.deferContextual(ctx -&gt; {
    log(&quot;Notifying shop about: &quot; + productName,
      ctx.get(&quot;CORRELATION_ID&quot;));
    return Mono.just(true);
  });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What is interesting is how we provide the correlation identifier. We use a special operator, &lt;code&gt;Mono.deferContextual&lt;/code&gt;, which has access to the &lt;code&gt;Context&lt;/code&gt;. From the &lt;code&gt;ContextView&lt;/code&gt; (a simplified, read-only &lt;code&gt;Context&lt;/code&gt; version) we extract the correlation identifier before returning an actual &lt;code&gt;Mono&lt;/code&gt; for the caller to subscribe to.&lt;/p&gt;
&lt;p&gt;Our handler looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;Mono&amp;#x3C;Void&gt; handleRequest() {
  long correlationId = correlationId();
  log(&quot;Assembling the chain&quot;, correlationId);

  Mono.just(&quot;test-product&quot;)
    .delayElement(Duration.ofMillis(1))
    .flatMap(product -&gt;
      Flux.concat(addProduct(product), notifyShop(product))
          .then())
    .contextWrite(Context.of(&quot;CORRELATION_ID&quot;, correlationId));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When subscribed to, the output is as expected:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[      main][ 6328001264807824115] Assembling the chain
[parallel-1][ 6328001264807824115] Adding product: test-product
[parallel-1][ 6328001264807824115] Notifying shop about: test-product
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The inversion of information flow is apparent. As in any reactive chain, we define the processing flow by assembling a chain of operators. Once we (or actually, the server) subscribe to this chain, the information flows from downstream operators to the upstream operators to initiate the processing. Afterwards, the actual data signals are delivered from the upstream to the downstream – for example, the “test-product” value travels to the &lt;code&gt;flatMap&lt;/code&gt; operator, then to the &lt;code&gt;concat&lt;/code&gt; operator, which in turn provides the value to both &lt;code&gt;addProduct&lt;/code&gt; and &lt;code&gt;notifyShop&lt;/code&gt;. Due to this flow of logic, we write the &lt;code&gt;Context&lt;/code&gt; at the very end (using the &lt;code&gt;contextWrite&lt;/code&gt; method), just before any &lt;code&gt;Subscriber&lt;/code&gt; subscribes to the chain. We can imagine the &lt;code&gt;Context&lt;/code&gt; then becomes accessible alongside the &lt;code&gt;Subscriber&lt;/code&gt; to all the stages in upstream operators.&lt;/p&gt;
&lt;p&gt;Regardless of how many thread hops the reactive pipeline makes along the way of executing the user’s business logic, the context is not lost.&lt;/p&gt;
&lt;p&gt;You can read more about Reactor &lt;code&gt;Context&lt;/code&gt; &lt;a href=&quot;https://projectreactor.io/docs/core/release/reference/#context&quot;&gt;in our documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;3rd party libraries&lt;/h2&gt;
&lt;p&gt;Unfortunately, we can’t expect 3rd party libraries to use Reactor &lt;code&gt;Context&lt;/code&gt; to provide observability capabilities. The de facto currency for propagating implicit meta-information is the &lt;code&gt;ThreadLocal&lt;/code&gt;. Libraries like SLF4J use an imperative style and have a stable position in the Java community. If we can make them work with the reactive paradigm instead of expecting them to adapt to it, it would be a clear win. In the next part, we discuss the history and challenges of propagating &lt;code&gt;ThreadLocal&lt;/code&gt; values in reactive chains in Spring Cloud Sleuth, a tracing library that can be used together with Reactor.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Spring Integration for AWS 3.0.0-M2 and Spring Cloud Stream Kinesis Binder 4.0.0-M1 Available]]></title><link>https://spring.io/blog/2023/03/27/spring-integration-for-aws-3-0-0-m2-and-spring-cloud-stream-kinesis-binder-4</link><guid isPermaLink="true">https://spring.io/blog/2023/03/27/spring-integration-for-aws-3-0-0-m2-and-spring-cloud-stream-kinesis-binder-4</guid><dc:creator><![CDATA[Artem Bilan]]></dc:creator><pubDate>Mon, 27 Mar 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Dear Spring community,&lt;/p&gt;
&lt;p&gt;Today I&apos;m excited to share with you news that &lt;a href=&quot;https://github.com/spring-projects/spring-integration-aws&quot;&gt;Spring Integration extension project for AWS&lt;/a&gt; and &lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-stream-binder-aws-kinesis&quot;&gt;AWS Kinesis Binder for Spring Cloud Stream&lt;/a&gt; have finally been moved to &lt;a href=&quot;https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/home.html&quot;&gt;AWS Java SDK v2&lt;/a&gt;, their respective milestones &lt;code&gt;3.0.0-M2&lt;/code&gt; &amp;#x26; &lt;code&gt;4.0.0-M1&lt;/code&gt; are available from Spring Milestone repository.&lt;/p&gt;
&lt;p&gt;I cannot tell that this was a pleasant work to do because it has turned to be not just a plain dependencies upgrade and namespace renaming. The whole AWS SDK API was changed to more modern Java style, including &lt;code&gt;CompletableFuture&lt;/code&gt; composition and &lt;code&gt;Stream&lt;/code&gt; API, lambda-style configuration, generated builders etc. They have even Reactive Streams support! Some options have been removed and some added. So, even if Spring Integration channel adapters are high enough API for end-users, they still suffered many breaking changes with these new generations.&lt;/p&gt;
&lt;p&gt;Some highlights of these milestone:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Of course, first of all the latest AWS SDK &lt;code&gt;2.20.32&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Upgrades to &lt;a href=&quot;https://awspring.io/&quot;&gt;Spring Cloud AWS&lt;/a&gt; &lt;code&gt;3.0.0&lt;/code&gt; with its new SQS listener API&lt;/li&gt;
&lt;li&gt;XML configuration removal. Right, this is unusual for Spring backwards compatibility, but Spring Cloud AWS did that already and there is no any Spring Cloud projects providing and XML support.&lt;/li&gt;
&lt;li&gt;Our own &lt;code&gt;DynamoDbLockRegistry&lt;/code&gt; implementation with a proper TTL support.&lt;/li&gt;
&lt;li&gt;KCL channel adapter now relies on a new &lt;a href=&quot;https://docs.aws.amazon.com/streams/latest/dev/building-enhanced-consumers-kcl.html&quot;&gt;Enhanced Fan-Out Consumer&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;All outbound channel adapters are &lt;code&gt;async&lt;/code&gt; by default and leverage a &lt;code&gt;CompletableFuture&lt;/code&gt; support from their super &lt;code&gt;AbstractMessageProducingHandler&lt;/code&gt; class.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&quot;https://docs.aws.amazon.com/glue/latest/dg/schema-registry.html&quot;&gt;Glue Schema&lt;/a&gt; support has been exposed in KCL and KPL channel adapters.&lt;/li&gt;
&lt;li&gt;The Kinesis Binder does not support &lt;a href=&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Streams.KCLAdapter.html&quot;&gt;DynamoDB Streams Adapter&lt;/a&gt; any more. There is no its implementation for SDK v2 and general AWS recommendation is to use Kinesis &lt;a href=&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/kds.html&quot;&gt;enabled on the table&lt;/a&gt; to  captures data changes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See READMEs of these projects on GitHub for more information.&lt;/p&gt;
&lt;p&gt;We are probably going to GA in a couple weeks, so don&apos;t hesitate to give them a try and come back with any feedback or contribution!&lt;/p&gt;
&lt;p&gt;Cheers, &lt;br&gt;
Artem&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://projects.spring.io/spring-integration/&quot;&gt;Project Page&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-integration/issues&quot;&gt;GitHub Issues&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-integration/blob/master/CONTRIBUTING.adoc&quot;&gt;Contributing&lt;/a&gt; | &lt;a href=&quot;http://stackoverflow.com/questions/tagged/spring-integration&quot;&gt;Help&lt;/a&gt; | &lt;a href=&quot;https://gitter.im/spring-projects/spring-integration&quot;&gt;Chat&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Spring Boot 3.1.0-M2 available now]]></title><link>https://spring.io/blog/2023/03/24/spring-boot-3-1-0-m2-available-now</link><guid isPermaLink="true">https://spring.io/blog/2023/03/24/spring-boot-3-1-0-m2-available-now</guid><dc:creator><![CDATA[Andy Wilkinson]]></dc:creator><pubDate>Fri, 24 Mar 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On behalf of the team and everyone who has contributed, I&apos;m happy to announce that Spring Boot &lt;code&gt;3.1.0-M2&lt;/code&gt; has been released and is now available from &lt;a href=&quot;https://repo.spring.io/milestone&quot;&gt;https://repo.spring.io/milestone&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This release includes &lt;a href=&quot;https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0-M2&quot;&gt;81 enhancements, documentation improvements, dependency upgrades, and bug fixes&lt;/a&gt;. Notable new features include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Auto-configuration for Spring Authorization Service&lt;/li&gt;
&lt;li&gt;Improved Testcontainers integration&lt;/li&gt;
&lt;li&gt;Improved auto-configuration for Spring for GraphQL&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please see the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.1.0-M2-Release-Notes&quot;&gt;release notes&lt;/a&gt; for more details and upgrade instructions.&lt;/p&gt;
&lt;p&gt;Thanks to all those who have contributed with issue reports and pull requests.&lt;/p&gt;
&lt;h3&gt;How can you help?&lt;/h3&gt;
&lt;p&gt;If you&apos;re interested in helping out, check out the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/labels/status%3A%20ideal-for-contribution&quot;&gt;&quot;ideal for contribution&quot; tag&lt;/a&gt; in the issue repository. If you have general questions, please ask on &lt;a href=&quot;https://stackoverflow.com&quot;&gt;stackoverflow.com&lt;/a&gt; using the &lt;a href=&quot;https://stackoverflow.com/tags/spring-boot&quot;&gt;&lt;code&gt;spring-boot&lt;/code&gt; tag&lt;/a&gt; or chat with the community on &lt;a href=&quot;https://gitter.im/spring-projects/spring-boot&quot;&gt;Gitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://spring.io/projects/spring-boot/&quot;&gt;Project Page&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-boot&quot;&gt;GitHub&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-boot/issues&quot;&gt;Issues&lt;/a&gt; | &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/3.1.0-M2/reference/html&quot;&gt;Documentation&lt;/a&gt; | &lt;a href=&quot;https://stackoverflow.com/questions/tagged/spring-boot&quot;&gt;Stack Overflow&lt;/a&gt; | &lt;a href=&quot;https://gitter.im/spring-projects/spring-boot&quot;&gt;Gitter&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Spring Modulith 0.5.1 released]]></title><link>https://spring.io/blog/2023/03/24/spring-modulith-0-5-1-released</link><guid isPermaLink="true">https://spring.io/blog/2023/03/24/spring-modulith-0-5-1-released</guid><dc:creator><![CDATA[Oliver Drotbohm]]></dc:creator><pubDate>Fri, 24 Mar 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I&apos;d like to announce the availability of Spring Modulith 0.5.1. The release primarily contains an important bug fix (the &lt;code&gt;spring-modulith-runtime&lt;/code&gt; module accidentally contained a Logback configuration file only intended for test usage) and the usual upgrade to the latest Spring Boot version. Find more information in the &lt;a href=&quot;https://github.com/spring-projects-experimental/spring-modulith/releases/tag/0.5.1&quot;&gt;full changelog&lt;/a&gt;, as well as &lt;a href=&quot;https://docs.spring.io/spring-modulith/docs/0.5.1/reference/html/&quot;&gt;reference documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In case you are wondering about what the project is all about, Voxxed Days Zurich have published &quot;Spring Modulith – Spring for Architecturally Curious Developers&quot;:&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/SjSjBZ7mo1g&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen&gt;&lt;/iframe&gt;</content:encoded></item><item><title><![CDATA[Spring for Apache Pulsar 0.2.0 available now]]></title><link>https://spring.io/blog/2023/03/24/spring-for-apache-pulsar-0-2-0-available-now</link><guid isPermaLink="true">https://spring.io/blog/2023/03/24/spring-for-apache-pulsar-0-2-0-available-now</guid><dc:creator><![CDATA[Chris Bono]]></dc:creator><pubDate>Fri, 24 Mar 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On behalf of the team and everyone who has contributed, I’m happy to announce that Spring for Apache Pulsar &lt;code&gt;0.2.0&lt;/code&gt; has been released and is now available from &lt;a href=&quot;https://repo1.maven.org/maven2/org/springframework/pulsar/spring-pulsar-spring-boot-starter/0.2.0&quot;&gt;Maven Central&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is the second GA minor release of the framework. Although &lt;code&gt;0.2.0&lt;/code&gt; still lives in the experimental Spring projects it is in the process of moving into the main Spring projects as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The core will move into spring-projects/spring-pulsar (targeting mid-April)&lt;/li&gt;
&lt;li&gt;The autoconfiguration will move into spring-projects/spring-boot (targeting the Spring Boot &lt;code&gt;3.2.0&lt;/code&gt; release)&lt;/li&gt;
&lt;li&gt;The binder will move into spring-cloud/spring-cloud-stream (targeting the SCSt &lt;code&gt;4.1.0&lt;/code&gt; release)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Notable Changes&lt;/h2&gt;
&lt;p&gt;We have been busy adding features since our &lt;a href=&quot;https://spring.io/blog/2022/12/15/spring-for-apache-pulsar-0-1-0-available-now&quot;&gt;last blog&lt;/a&gt;. Notable new features include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spring Boot &lt;code&gt;3.0.5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Apache Pulsar &lt;code&gt;2.11.0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Apache Pulsar Reactive client &lt;code&gt;0.2.0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Spring Cloud Stream Pulsar binder (AOT enabled)&lt;/li&gt;
&lt;li&gt;Pulsar IO / Pulsar Functions support&lt;/li&gt;
&lt;li&gt;Pulsar header mapper (w/ encoding and filtering)&lt;/li&gt;
&lt;li&gt;Default type mappings (topics + schema info)&lt;/li&gt;
&lt;li&gt;Pulsar Reader support&lt;/li&gt;
&lt;li&gt;Tombstone support&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please see the &lt;a href=&quot;https://github.com/spring-projects-experimental/spring-pulsar/releases/tag/0.2.0&quot;&gt;release notes&lt;/a&gt; for more detail.&lt;/p&gt;
&lt;p&gt;A great place to get started is the &lt;a href=&quot;https://docs.spring.io/spring-pulsar/docs/0.2.0/reference/html/#quick-tour&quot;&gt;Quick Tour&lt;/a&gt; in the reference docs.&lt;/p&gt;
&lt;h3&gt;How can you help?&lt;/h3&gt;
&lt;p&gt;If you&apos;re interested in helping out, check out the &lt;a href=&quot;https://github.com/spring-projects-experimental/spring-pulsar/labels/status%3A%20ideal-for-contribution&quot;&gt;&quot;ideal for contribution&quot; tag&lt;/a&gt; in the issue repository. If you have general questions, please ask on Stack Overflow using the &lt;a href=&quot;https://stackoverflow.com/tags/spring-pulsar&quot;&gt;&lt;code&gt;spring-pulsar&lt;/code&gt; tag&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/spring-projects-experimental/spring-pulsar&quot;&gt;GitHub&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects-experimental/spring-pulsar/issues&quot;&gt;Issues&lt;/a&gt; | &lt;a href=&quot;https://docs.spring.io/spring-pulsar/docs/0.2.0/reference/html&quot;&gt;Documentation&lt;/a&gt; | &lt;a href=&quot;https://stackoverflow.com/tags/spring-pulsar&quot;&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[A Bootiful Podcast:  Mark Thomas, Apache Tomcat contributor extraordinaire]]></title><link>https://spring.io/blog/2023/03/23/a-bootiful-podcast-mark-thomas-apache-tomcat-contributor-extraordinaire</link><guid isPermaLink="true">https://spring.io/blog/2023/03/23/a-bootiful-podcast-mark-thomas-apache-tomcat-contributor-extraordinaire</guid><dc:creator><![CDATA[Josh Long]]></dc:creator><pubDate>Thu, 23 Mar 2023 00:00:00 GMT</pubDate><content:encoded>&lt;iframe title=&quot;Apache Tomcat contributor extraordinaire Mark Thomas&quot; allowtransparency=&quot;true&quot; height=&quot;150&quot; width=&quot;100%&quot; style=&quot;border: none; min-width: min(100%, 430px);&quot; scrolling=&quot;no&quot; data-name=&quot;pb-iframe-player&quot; src=&quot;https://www.podbean.com/player-v2/?i=yh962-13c4e27-pb&amp;from=pb6admin&amp;share=1&amp;download=1&amp;rtl=0&amp;fonts=Arial&amp;skin=1&amp;font-color=&amp;logo_link=episode_page&amp;btn-skin=7&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;Hi, Spring fans! Welcome to another installment of A Bootiful Podcast! In this installment, Josh Long talks to longtime Apache Tomcat contributor extraordinaire Mark Thomas&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I wrote a free white paper on using Spring Boot 3 AOT and GraalVM. Learn the secrets to working with Spring Boot 3 and GraalVM native images  &lt;a href=&quot;https://tanzu.vmware.com/content/white-papers/spring-boot-3&quot;&gt;https://tanzu.vmware.com/content/white-papers/spring-boot-3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;I did a Spring Tips installment on using Vaadin and Spring Boot 3 together, along with the shiny new AOT support &lt;a href=&quot;https://www.youtube.com/watch?v=nyR-qzj7O3w&quot;&gt;https://www.youtube.com/watch?v=nyR-qzj7O3w&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java 20 is out! the last one to install it is a rotten egg! Get the bits NOW! &lt;a href=&quot;https://twitter.com/java/status/1638195008162471936&quot;&gt;https://twitter.com/java/status/1638195008162471936&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Want to learn Spring Boot 3? Check out this video I did for the Jetbrains channel a few weeks ago &lt;a href=&quot;https://www.youtube.com/watch?v=Y2gZz8-yK7Y&quot;&gt;https://www.youtube.com/watch?v=Y2gZz8-yK7Y&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Spring Integration 5.5.17, 6.0.4 and 6.1.0-M2 Available]]></title><link>https://spring.io/blog/2023/03/23/spring-integration-5-5-17-6-0-4-and-6-1-0-m2-available</link><guid isPermaLink="true">https://spring.io/blog/2023/03/23/spring-integration-5-5-17-6-0-4-and-6-1-0-m2-available</guid><dc:creator><![CDATA[Artem Bilan]]></dc:creator><pubDate>Thu, 23 Mar 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Dear Spring community,&lt;/p&gt;
&lt;p&gt;On behalf of the team, it is my pleasure to announce that Spring Integration &lt;code&gt;6.1.0-M2&lt;/code&gt; is now available from Spring Milestone repository.&lt;/p&gt;
&lt;p&gt;In addition bug fixes versions &lt;code&gt;5.5.17&lt;/code&gt; and &lt;code&gt;6.0.4&lt;/code&gt; have been released.
They also include upgrades to the latest point versions of dependencies with their bug fixes.&lt;/p&gt;
&lt;p&gt;The Spring Integration &lt;code&gt;6.1&lt;/code&gt; version is a natural evolution of &lt;code&gt;6.x&lt;/code&gt; generation with fixes and improvements which didn&apos;t make it into &lt;code&gt;6.0&lt;/code&gt;.
Plus we listen to community and make some possibly but convenient for target projects breaking changes.&lt;/p&gt;
&lt;p&gt;Some highlights of this new version include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Upgrades to the latest dependencies, but only if they don&apos;t break the public API we expose&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Added Protobuf transformers support (shout out to &lt;a href=&quot;https://spring.io/team/tzolov&quot;&gt;Christian Tzolov&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Migration of Zip extension to respective module in the core project&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;MessageFilter&lt;/code&gt; now emits a WARN log when a request message is dropped making it, technically, not silent as it was before&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now gateways and replying handlers don&apos;t block forever for sending and receiving operations.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The default timeout in the framework is chosen to be &lt;code&gt;30&lt;/code&gt; seconds&lt;/p&gt;
&lt;p&gt;See &lt;a href=&quot;https://docs.spring.io/spring-integration/docs/6.1.0-M2/reference/html/whats-new.html#whats-new&quot;&gt;What&apos;s New&lt;/a&gt; in the documentation and don&apos;t forget about a &lt;a href=&quot;https://github.com/spring-projects/spring-integration/wiki/Spring-Integration-6.0-to-6.1-Migration-Guide&quot;&gt;Migration Guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Following Spring Boot release cadence we are going to have Spring Integration &lt;code&gt;6.1.0-RC1&lt;/code&gt; in April and then GA in May - just for upcoming Spring Boot &lt;code&gt;3.1.0&lt;/code&gt;. Feel free to contribute whatever you find valuable!&lt;/p&gt;
&lt;p&gt;Cheers, &lt;br&gt;
Artem&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://projects.spring.io/spring-integration/&quot;&gt;Project Page&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-integration/issues&quot;&gt;GitHub Issues&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-integration/blob/master/CONTRIBUTING.adoc&quot;&gt;Contributing&lt;/a&gt; | &lt;a href=&quot;http://stackoverflow.com/questions/tagged/spring-integration&quot;&gt;Help&lt;/a&gt; | &lt;a href=&quot;https://gitter.im/spring-projects/spring-integration&quot;&gt;Chat&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Spring Boot 3.0.5 available now]]></title><link>https://spring.io/blog/2023/03/23/spring-boot-3-0-5-available-now</link><guid isPermaLink="true">https://spring.io/blog/2023/03/23/spring-boot-3-0-5-available-now</guid><dc:creator><![CDATA[Andy Wilkinson]]></dc:creator><pubDate>Thu, 23 Mar 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On behalf of the team and everyone who has contributed, I&apos;m happy to announce that Spring Boot &lt;code&gt;3.0.5&lt;/code&gt; has been released and is now available from Maven Central.&lt;/p&gt;
&lt;p&gt;This release includes &lt;a href=&quot;https://github.com/spring-projects/spring-boot/releases/tag/v3.0.5&quot;&gt;40 bug fixes, documentation improvements, and dependency upgrades&lt;/a&gt;. Thanks to all those who have contributed with issue reports and pull requests.&lt;/p&gt;
&lt;h3&gt;Java 20 Support&lt;/h3&gt;
&lt;p&gt;Following the GA release of Java 20 earlier this week, Spring Boot 3.0.5 adds support for Java 20.&lt;/p&gt;
&lt;h3&gt;How can you help?&lt;/h3&gt;
&lt;p&gt;If you&apos;re interested in helping out, check out the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/labels/status%3A%20ideal-for-contribution&quot;&gt;&quot;ideal for contribution&quot; tag&lt;/a&gt; in the issue repository. If you have general questions, please ask on &lt;a href=&quot;https://stackoverflow.com&quot;&gt;stackoverflow.com&lt;/a&gt; using the &lt;a href=&quot;https://stackoverflow.com/tags/spring-boot&quot;&gt;&lt;code&gt;spring-boot&lt;/code&gt; tag&lt;/a&gt; or chat with the community on &lt;a href=&quot;https://gitter.im/spring-projects/spring-boot&quot;&gt;Gitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://spring.io/projects/spring-boot/&quot;&gt;Project Page&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-boot&quot;&gt;GitHub&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-boot/issues&quot;&gt;Issues&lt;/a&gt; | &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/3.0.5/reference/html&quot;&gt;Documentation&lt;/a&gt; | &lt;a href=&quot;https://stackoverflow.com/questions/tagged/spring-boot&quot;&gt;Stack Overflow&lt;/a&gt; | &lt;a href=&quot;https://gitter.im/spring-projects/spring-boot&quot;&gt;Gitter&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Spring Boot 2.7.10 available now]]></title><link>https://spring.io/blog/2023/03/23/spring-boot-2-7-10-available-now</link><guid isPermaLink="true">https://spring.io/blog/2023/03/23/spring-boot-2-7-10-available-now</guid><dc:creator><![CDATA[Andy Wilkinson]]></dc:creator><pubDate>Thu, 23 Mar 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On behalf of the team and everyone who has contributed, I&apos;m happy to announce that Spring Boot &lt;code&gt;2.7.10&lt;/code&gt; has been released and is now available from Maven Central.&lt;/p&gt;
&lt;p&gt;This release includes &lt;a href=&quot;https://github.com/spring-projects/spring-boot/releases/tag/v2.7.10&quot;&gt;34 bug fixes, documentation improvements, and dependency upgrades&lt;/a&gt;. Thanks to all those who have contributed with issue reports and pull requests.&lt;/p&gt;
&lt;h3&gt;Java 20 Support&lt;/h3&gt;
&lt;p&gt;Following the GA release of Java 20 earlier this week, Spring Boot 2.7.10 adds support for Java 20.&lt;/p&gt;
&lt;h3&gt;How can you help?&lt;/h3&gt;
&lt;p&gt;If you&apos;re interested in helping out, check out the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/labels/status%3A%20ideal-for-contribution&quot;&gt;&quot;ideal for contribution&quot; tag&lt;/a&gt; in the issue repository. If you have general questions, please ask on &lt;a href=&quot;https://stackoverflow.com&quot;&gt;stackoverflow.com&lt;/a&gt; using the &lt;a href=&quot;https://stackoverflow.com/tags/spring-boot&quot;&gt;&lt;code&gt;spring-boot&lt;/code&gt; tag&lt;/a&gt; or chat with the community on &lt;a href=&quot;https://gitter.im/spring-projects/spring-boot&quot;&gt;Gitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://spring.io/projects/spring-boot/&quot;&gt;Project Page&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-boot&quot;&gt;GitHub&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-boot/issues&quot;&gt;Issues&lt;/a&gt; | &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.7.10/reference/html&quot;&gt;Documentation&lt;/a&gt; | &lt;a href=&quot;https://stackoverflow.com/questions/tagged/spring-boot&quot;&gt;Stack Overflow&lt;/a&gt; | &lt;a href=&quot;https://gitter.im/spring-projects/spring-boot&quot;&gt;Gitter&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Spring HATEOAS 1.5.4, 2.0.3 and 2.1 M1 released]]></title><link>https://spring.io/blog/2023/03/23/spring-hateoas-1-5-4-2-0-3-and-2-1-m1-released</link><guid isPermaLink="true">https://spring.io/blog/2023/03/23/spring-hateoas-1-5-4-2-0-3-and-2-1-m1-released</guid><dc:creator><![CDATA[Oliver Drotbohm]]></dc:creator><pubDate>Thu, 23 Mar 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I am excited to announce the releases of versions 1.5.4, 2.0.3 and 2.1 M1 of Spring HATEOAS. The bug fix releases primarily ship dependency upgrades, including one to the latest Spring Framework 5 and 6 releases which include fixes for a CVE. The 2.1 milestone includes a couple of new features, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Property metadata for forms now also considers JSR-03&apos;s &lt;code&gt;@Size&lt;/code&gt; annotation – &lt;a href=&quot;https://github.com/spring-projects/spring-hateoas/issues/1920&quot;&gt;#1920&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Introduction of &lt;code&gt;SlicedModel&lt;/code&gt;, a simplified version of &lt;code&gt;PagedModel&lt;/code&gt; to navigate slices but not calculate a total – &lt;a href=&quot;https://github.com/spring-projects/spring-hateoas/issues/1856&quot;&gt;#1856&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more information, please check out the full changelogs &lt;a href=&quot;https://github.com/spring-projects/spring-hateoas/releases&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;</content:encoded></item></channel></rss>